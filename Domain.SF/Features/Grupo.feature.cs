// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Domain.SF.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class GrupoFeature : object, Xunit.IClassFixture<GrupoFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Grupo.feature"
#line hidden
        
        public GrupoFeature(GrupoFeature.FixtureData fixtureData, Domain_SF_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Grupo", "Feature: Grupo\r\n  As a user\r\n  I want to manage Grupos\r\n  So that I can create, r" +
                    "ead, update, and delete Grupo records", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 8
  #line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "NomeDoGrupo",
                        "RazaoSocial",
                        "NomeFantasia",
                        "Cnpj",
                        "InscricaoEstadual",
                        "CpfDoAdministrador",
                        "PreNomeDoAdministrador",
                        "NomeDoMeioDoAdministrador",
                        "SobreNomeDoAdministrador",
                        "EmailDoAdministrador",
                        "InsertedBy",
                        "Status"});
            table1.AddRow(new string[] {
                        "11111111-1111-1111-1111-111111111111",
                        "Grupo1",
                        "Razao1",
                        "Fantasia1",
                        "11111111111",
                        "1234567890",
                        "11111111111",
                        "John",
                        "Middle",
                        "Doe",
                        "john@example.com",
                        "user1",
                        "ATIVO"});
            table1.AddRow(new string[] {
                        "22222222-2222-2222-2222-222222222222",
                        "Grupo2",
                        "Razao2",
                        "Fantasia2",
                        "22222222222",
                        "2345678901",
                        "22222222222",
                        "Jane",
                        "Middle",
                        "Doe",
                        "jane@example.com",
                        "user2",
                        "ATIVO"});
#line 9
    testRunner.Given("the following Grupos exist:", ((string)(null)), table1, "Given ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create a new Grupo")]
        [Xunit.TraitAttribute("FeatureTitle", "Grupo")]
        [Xunit.TraitAttribute("Description", "Create a new Grupo")]
        public void CreateANewGrupo()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a new Grupo", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 14
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "NomeDoGrupo",
                            "RazaoSocial",
                            "NomeFantasia",
                            "Cnpj",
                            "InscricaoEstadual",
                            "CpfDoAdministrador",
                            "PreNomeDoAdministrador",
                            "NomeDoMeioDoAdministrador",
                            "SobreNomeDoAdministrador",
                            "EmailDoAdministrador",
                            "InsertedBy"});
                table2.AddRow(new string[] {
                            "NovoGrupo",
                            "NovaRazao",
                            "NovaFantasia",
                            "33333333333",
                            "3456789012",
                            "33333333333",
                            "New",
                            "Middle",
                            "User",
                            "newuser@example.com",
                            "user3"});
#line 15
    testRunner.When("I create a new Grupo with the following details:", ((string)(null)), table2, "When ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "NomeDoGrupo",
                            "RazaoSocial",
                            "NomeFantasia",
                            "Cnpj",
                            "InscricaoEstadual",
                            "CpfDoAdministrador",
                            "PreNomeDoAdministrador",
                            "NomeDoMeioDoAdministrador",
                            "SobreNomeDoAdministrador",
                            "EmailDoAdministrador",
                            "InsertedBy"});
#line 18
    testRunner.Then("a new Grupo should be created with the following details:", ((string)(null)), table3, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Retrieve an existing Grupo")]
        [Xunit.TraitAttribute("FeatureTitle", "Grupo")]
        [Xunit.TraitAttribute("Description", "Retrieve an existing Grupo")]
        public void RetrieveAnExistingGrupo()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Retrieve an existing Grupo", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 21
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
  this.FeatureBackground();
#line hidden
#line 22
    testRunner.When("I retrieve the Grupo with Id \"11111111-1111-1111-1111-111111111111\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "NomeDoGrupo",
                            "RazaoSocial",
                            "NomeFantasia",
                            "Cnpj",
                            "InscricaoEstadual",
                            "CpfDoAdministrador",
                            "PreNomeDoAdministrador",
                            "NomeDoMeioDoAdministrador",
                            "SobreNomeDoAdministrador",
                            "EmailDoAdministrador",
                            "InsertedBy"});
                table4.AddRow(new string[] {
                            "Grupo1",
                            "Razao1",
                            "Fantasia1",
                            "11111111111",
                            "1234567890",
                            "11111111111",
                            "John",
                            "Middle",
                            "Doe",
                            "john@example.com",
                            "user1"});
#line 23
    testRunner.Then("the retrieved Grupo should have the following details:", ((string)(null)), table4, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Update an existing Grupo")]
        [Xunit.TraitAttribute("FeatureTitle", "Grupo")]
        [Xunit.TraitAttribute("Description", "Update an existing Grupo")]
        public void UpdateAnExistingGrupo()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update an existing Grupo", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 27
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
  this.FeatureBackground();
#line hidden
#line 28
    testRunner.Given("the Grupo with Id \"11111111-1111-1111-1111-111111111111\" exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Status",
                            "UpdatedBy"});
                table5.AddRow(new string[] {
                            "INATIVO",
                            "user4"});
#line 29
    testRunner.When("I update the Grupo with the following details:", ((string)(null)), table5, "When ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "Status"});
                table6.AddRow(new string[] {
                            "INATIVO"});
#line 32
    testRunner.Then("the Grupo with Id \"11111111-1111-1111-1111-111111111111\" should have the followin" +
                        "g status:", ((string)(null)), table6, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Delete an existing Grupo")]
        [Xunit.TraitAttribute("FeatureTitle", "Grupo")]
        [Xunit.TraitAttribute("Description", "Delete an existing Grupo")]
        public void DeleteAnExistingGrupo()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete an existing Grupo", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 36
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
  this.FeatureBackground();
#line hidden
#line 37
    testRunner.Given("the Grupo with Id \"11111111-1111-1111-1111-111111111111\" exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 38
    testRunner.When("I delete the Grupo with Id \"11111111-1111-1111-1111-111111111111\" updated by \"use" +
                        "r5\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "Status"});
                table7.AddRow(new string[] {
                            "EXCLUIDO"});
#line 39
    testRunner.Then("the Grupo with Id \"11111111-1111-1111-1111-111111111111\" should have the followin" +
                        "g status:", ((string)(null)), table7, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                GrupoFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                GrupoFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
